import boto3
import os
import json
import logging

# Initialize EC2 and SNS clients
ec2_client = boto3.client('ec2')
sns_client = boto3.client('sns')

# Setup logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Environment variables
SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN')
IP_THRESHOLD_PERCENT = int(os.environ.get('IP_THRESHOLD_PERCENT', '80'))  # Default subnet IP threshold is 80%
ENI_THRESHOLD = int(os.environ.get('ENI_THRESHOLD', '15'))  # Default threshold for ENIs in available state is 15


def get_subnet_name(subnet):
    """Retrieve the Name tag from the subnet tags."""
    tags = subnet.get('Tags', [])
    for tag in tags:
        if tag['Key'] == 'Name':
            return tag['Value']
    return 'N/A'  # Return 'N/A' if no Name tag is found


def monitor_available_enis():
    """Monitor ENIs in 'available' state and send alerts if the count exceeds the threshold."""
    try:
        logger.info("Checking available ENIs...")
        response = ec2_client.describe_network_interfaces(Filters=[{'Name': 'status', 'Values': ['available']}])
        available_enis = response.get('NetworkInterfaces', [])
        eni_count = len(available_enis)

        if eni_count > ENI_THRESHOLD:
            message = (
                f"Alert! There are {eni_count} ENIs in the 'available' state.\n"
                f"This exceeds the threshold of {ENI_THRESHOLD} ENIs."
            )
            sns_client.publish(
                TopicArn=SNS_TOPIC_ARN,
                Message=message,
                Subject='High Number of Available ENIs Alert'
            )
            logger.info(f"Alert sent for {eni_count} available ENIs.")
        else:
            logger.info(f"Number of available ENIs ({eni_count}) is within the safe limit.")
    except Exception as e:
        logger.error(f"Failed to check ENIs in available state: {str(e)}")


def monitor_subnet_ip_usage():
    """Monitor subnet IP usage and send alerts if usage exceeds the threshold."""
    try:
        # Get all VPCs
        logger.info("Checking subnet IP usage...")
        vpcs_response = ec2_client.describe_vpcs()
        vpcs = vpcs_response.get('Vpcs', [])

        if not vpcs:
            logger.warning("No VPCs found in the account.")
            return

        # Iterate through each VPC
        for vpc in vpcs:
            vpc_id = vpc['VpcId']
            logger.info(f"Checking subnets in VPC {vpc_id}...")

            # Get all subnets in the current VPC
            subnets_response = ec2_client.describe_subnets(Filters=[{'Name': 'vpc-id', 'Values': [vpc_id]}])
            subnets = subnets_response.get('Subnets', [])

            if not subnets:
                logger.warning(f"No subnets found in VPC {vpc_id}.")
                continue

            # Process each subnet in the VPC
            for subnet in subnets:
                try:
                    subnet_id = subnet['SubnetId']
                    subnet_name = get_subnet_name(subnet)
                    available_ips = subnet['AvailableIpAddressCount']
                    cidr_block = subnet['CidrBlock']

                    # Calculate the total number of IPs in the subnet based on the CIDR block
                    total_ips = 2**(32 - int(cidr_block.split('/')[1])) - 5  # Subtract 5 for reserved IPs

                    if total_ips <= 0:
                        logger.warning(f"Skipping invalid subnet {subnet_id} in VPC {vpc_id} with CIDR {cidr_block}.")
                        continue

                    # Calculate the percentage of used IPs
                    used_ip_percent = ((total_ips - available_ips) / total_ips) * 100

                    logger.info(f"VPC {vpc_id}, Subnet {subnet_id} (Name: {subnet_name}): {used_ip_percent:.2f}% IPs used.")

                    # Send an alert if the usage exceeds the threshold
                    if used_ip_percent >= IP_THRESHOLD_PERCENT:
                        message = (
                            f"Alert! The subnet {subnet_name} ({subnet_id}) in VPC {vpc_id} is running out of IP addresses.\n"
                            f"Available IPs: {available_ips}\n"
                            f"Used IP percentage: {used_ip_percent:.2f}%\n"
                            f"CIDR Block: {cidr_block}"
                        )
                        sns_client.publish(
                            TopicArn=SNS_TOPIC_ARN,
                            Message=message,
                            Subject=f'VPC {vpc_id}, Subnet {subnet_name} ({subnet_id}) IP Alert'
                        )
                        logger.info(f"Alert sent for subnet {subnet_id} (Name: {subnet_name}) in VPC {vpc_id}.")
                    else:
                        logger.info(f"Subnet {subnet_id} (Name: {subnet_name}) in VPC {vpc_id} is within safe limits with {used_ip_percent:.2f}% usage.")

                except KeyError as e:
                    logger.error(f"Missing expected data in subnet {subnet.get('SubnetId', 'Unknown')} in VPC {vpc_id} - {str(e)}")
                except Exception as e:
                    logger.error(f"Error processing subnet {subnet.get('SubnetId', 'Unknown')} in VPC {vpc_id}: {str(e)}")

    except Exception as e:
        logger.error(f"Failed to retrieve or process VPCs/subnets: {str(e)}")


def lambda_handler(event, context):
    """Main Lambda handler function."""
    logger.info("Starting subnet and ENI monitoring...")
    
    # Monitor ENIs and log separately
    monitor_available_enis()
    
    # Monitor subnet IP usage and log separately
    monitor_subnet_ip_usage()
    
    logger.info("Monitoring completed successfully.")
    return {
        'statusCode': 200,
        'body': json.dumps('Subnet and ENI monitoring completed successfully.')
    }
