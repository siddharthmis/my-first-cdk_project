import time
import os
import boto3
import requests
import urllib.parse

# === ENVIRONMENT VARIABLES ===
APP_NAME = os.getenv("APP_NAME")               # FCC or PBCS
BACKUP_DATE = os.getenv("BACKUP_DATE")         # dd_mm_yyyy
SECRET_NAME = os.getenv("ORACLE_SECRET_NAME")  # e.g., oracle/backup/credentials
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")   # S3 bucket to store backup

# === ORACLE ENVIRONMENT BASE URLS ===
oracle_urls = {
    "FCC": "https://resolutionlifegroup-test.resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com",
    "PBCS": "https://rlplan2-resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com"
}

# === CONFIG ===
SNAPSHOT_NAME = "Artifact Snapshot.zip"
POLL_INTERVAL = 15  # seconds
POLL_TIMEOUT = 600  # seconds (10 min)

def get_credentials():
    client = boto3.client("secretsmanager")
    secret = client.get_secret_value(SecretId=SECRET_NAME)
    creds = eval(secret["SecretString"])  # Or use json.loads
    return creds["username"], creds["password"]

def export_snapshot(base_url, auth):
    encoded_name = urllib.parse.quote(SNAPSHOT_NAME)
    export_url = f"{base_url}/epm/rest/v2/applicationsnapshots/{encoded_name}/export"
    print(f"[{APP_NAME}] Initiating snapshot export: {export_url}")
    resp = requests.post(export_url, auth=auth)
    resp.raise_for_status()
    print(f"[{APP_NAME}] Export job triggered.")
    return encoded_name

def wait_for_export(base_url, auth, encoded_name):
    status_url = f"{base_url}/epm/rest/v2/applicationsnapshots/{encoded_name}"
    print(f"[{APP_NAME}] Polling snapshot export status...")
    start_time = time.time()
    
    while time.time() - start_time < POLL_TIMEOUT:
        resp = requests.get(status_url, auth=auth)
        resp.raise_for_status()
        data = resp.json()
        status = data.get("status", "")
        
        print(f"[{APP_NAME}] Current status: {status}")
        if status == "completed":
            print(f"[{APP_NAME}] Export complete.")
            return True
        elif status == "error":
            raise Exception(f"[{APP_NAME}] Snapshot export failed.")

        time.sleep(POLL_INTERVAL)
    
    raise TimeoutError(f"[{APP_NAME}] Snapshot export timed out after {POLL_TIMEOUT} seconds.")

def download_snapshot(base_url, auth, encoded_name):
    download_url = f"{base_url}/epm/rest/v2/applicationsnapshots/{encoded_name}/download"
    filename = f"Artifact Snapshot_{APP_NAME}_{BACKUP_DATE}.zip"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    print(f"[{APP_NAME}] Downloading snapshot: {download_url}")

    with requests.get(download_url, auth=auth, headers=headers, stream=True, timeout=60) as r:
        r.raise_for_status()
        with open(filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

    print(f"[{APP_NAME}] Snapshot downloaded and saved as {filename}")
    return filename

def upload_to_s3(file_path):
    if not S3_BUCKET_NAME:
        raise ValueError("S3_BUCKET_NAME environment variable not set.")
    
    s3 = boto3.client("s3")
    key = f"oracle-backups/{APP_NAME}/{os.path.basename(file_path)}"
    print(f"[{APP_NAME}] Uploading to s3://{S3_BUCKET_NAME}/{key}")
    s3.upload_file(file_path, S3_BUCKET_NAME, key)
    print(f"[✅] Uploaded to S3: s3://{S3_BUCKET_NAME}/{key}")

def main():
    if APP_NAME not in oracle_urls:
        raise ValueError("Invalid APP_NAME provided")

    base_url = oracle_urls[APP_NAME]
    username, password = get_credentials()
    auth = (username, password)

    try:
        encoded_name = export_snapshot(base_url, auth)
        wait_for_export(base_url, auth, encoded_name)
        file_path = download_snapshot(base_url, auth, encoded_name)
        upload_to_s3(file_path)
    except Exception as e:
        print(f"[❌] Error during {APP_NAME} backup: {e}")
        raise

if __name__ == "__main__":
    main()
