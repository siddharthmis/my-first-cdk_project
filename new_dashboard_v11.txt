import boto3
import json
import logging
from datetime import datetime, timedelta

# Initialize AWS clients
dynamodb = boto3.client('dynamodb')
cloudwatch = boto3.client('cloudwatch')

# Setup logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Dictionary to map resource types to correct dimension names and namespace
resource_namespace_map = {
    'EC2': ('AWS/EC2', ['InstanceId']),
    'RDS': ('AWS/RDS', ['DBInstanceIdentifier']),
    'ALB': ('AWS/ApplicationELB', ['LoadBalancer']),
    'ALBTarget': ('AWS/ApplicationELB', ['TargetGroup', 'LoadBalancer']),
    'Lambda': ('AWS/Lambda', ['FunctionName']),
    'Elasticache': ('AWS/ElastiCache', ['CacheClusterId']),
    'Redshift': ('AWS/Redshift', ['ClusterIdentifier']),
    'FSx': ('AWS/FSx', ['FileSystemId']),
    'Macie': ('AWS/Macie', ['MemberAccountId']),
    'Neptune': ('AWS/Neptune', ['DBInstanceIdentifier']),
    'Opensearch': ('AWS/ES', ['DomainName']),
    'Outposts': ('AWS/Outposts', ['OutpostId']),
    'Aurora': ('AWS/RDS', ['DBClusterIdentifier']),
    'Backup': ('AWS/Backup', ['ResourceArn']),
}

# Define health metrics for each service type
service_health_metrics = {
    'EC2': 'StatusCheckFailed',
    'RDS': 'FreeStorageSpace',
    'ALB': 'UnHealthyHostCount',
    'ALBTarget': 'UnHealthyHostCount',  # Health of target groups
    'Lambda': 'Errors',
    'Elasticache': 'CPUUtilization',
    'Redshift': 'CPUUtilization',
    'FSx': 'DiskReadOps',
    'Opensearch': 'ClusterStatus.red',
    'Neptune': 'CPUUtilization',
    'Outposts': 'UnhealthyInstanceCount',
    'Macie': 'FindingCount',  # Using FindingCount as an indicator for Macie activity
    'Aurora': 'FreeStorageSpace',  # Could also use CPUUtilization if needed
    'Backup': 'BackupJobFailures',  # Track backup job failures
}

# Function to get all DynamoDB entries with proper error handling
def get_all_dynamodb_entries():
    try:
        response = dynamodb.scan(TableName='ResourceMetrics')
        entries = response['Items']
        logger.info(f"Fetched {len(entries)} entries from DynamoDB.")
        return entries
    except Exception as e:
        logger.error(f"Error fetching entries from DynamoDB: {e}")
        return []

# Function to fetch real-time metric value from CloudWatch
def fetch_metric_value(namespace, metric_name, dimension_name, dimension_value):
    try:
        now = datetime.utcnow()
        start_time = now - timedelta(minutes=10)  # Fetch metric data from the last 10 minutes
        response = cloudwatch.get_metric_data(
            MetricDataQueries=[
                {
                    'Id': 'metric_query',
                    'MetricStat': {
                        'Metric': {
                            'Namespace': namespace,
                            'MetricName': metric_name,
                            'Dimensions': [
                                {'Name': dimension_name, 'Value': dimension_value}
                            ]
                        },
                        'Period': 300,
                        'Stat': 'Average'
                    },
                    'ReturnData': True
                }
            ],
            StartTime=start_time,
            EndTime=now
        )
        # Extract the most recent data point if available
        metric_data = response['MetricDataResults'][0]['Values']
        if metric_data:
            return metric_data[0]  # Return the latest value
        return None
    except Exception as e:
        logger.error(f"Error fetching metric value for {namespace}/{metric_name}: {e}")
        return None

# Function to check health status based on resource type and metrics
def check_health_status(resource_type, metric_name, metric_value):
    if resource_type == 'EC2':
        return 'Unhealthy' if metric_name == 'StatusCheckFailed' and float(metric_value) > 0 else 'Healthy'
    elif resource_type == 'RDS':
        return 'Unhealthy' if metric_name == 'FreeStorageSpace' and float(metric_value) < 1_073_741_824 else 'Healthy'
    elif resource_type == 'ALB' or resource_type == 'ALBTarget':
        return 'Unhealthy' if metric_name == 'UnHealthyHostCount' and float(metric_value) > 0 else 'Healthy'
    elif resource_type == 'Lambda':
        return 'Unhealthy' if metric_name in ['Errors', 'Throttles'] and float(metric_value) > 0 else 'Healthy'
    elif resource_type == 'Macie':
        return 'Unhealthy' if metric_name == 'FindingCount' and float(metric_value) > 0 else 'Healthy'
    elif resource_type == 'Aurora':
        return 'Unhealthy' if metric_name == 'FreeStorageSpace' and float(metric_value) < 1_073_741_824 else 'Healthy'
    elif resource_type == 'Backup':
        return 'Unhealthy' if metric_name == 'BackupJobFailures' and float(metric_value) > 0 else 'Healthy'
    # Add other services as needed...
    return 'Unknown'

# Function to create resource count widgets
def create_resource_summary_widgets(resource_counts):
    widgets = []
    x, y = 0, 0
    for resource_type, count in resource_counts.items():
        widget = {
            "type": "text",
            "x": x,
            "y": y,
            "width": 12,
            "height": 6,
            "properties": {
                "markdown": f"### {resource_type} Resource Count: **{count}**"
            }
        }
        widgets.append(widget)
        x += 12  # Move to the next column, max 2 widgets per row
        if x >= 24:  # Wrap to next row if x exceeds the width of 24
            x = 0
            y += 6
    return widgets

# Function to create Healthy vs Unhealthy Resource Widgets
def create_status_summary_widget(resource_counts, unhealthy_counts):
    widgets = []
    x, y = 0, 0
    for resource_type, count in resource_counts.items():
        unhealthy = unhealthy_counts.get(resource_type, 0)
        healthy = count - unhealthy
        widget = {
            "type": "text",
            "x": x,
            "y": y,
            "width": 12,
            "height": 6,
            "properties": {
                "markdown": f"### {resource_type} - Healthy: **{healthy}**, Unhealthy: **{unhealthy}**"
            }
        }
        widgets.append(widget)
        x += 12  # Move to the next column, max 2 widgets per row
        if x >= 24:  # Wrap to next row if x exceeds the width of 24
            x = 0
            y += 6
    return widgets

# Main Lambda handler function
def lambda_handler(event, context):
    try:
        # Fetch all existing entries in DynamoDB
        dynamodb_entries = get_all_dynamodb_entries()

        # Initialize data structures
        resource_counts = {}
        unhealthy_counts = {}
        metrics_data = {}

        # Process each entry in DynamoDB
        for entry in dynamodb_entries:
            try:
                resource_type = entry['ResourceType']['S']
                resource_id = entry['ResourceID']['S']
                metric_name = entry['MetricName']['S']
                statistic = entry.get('Statistic', {}).get('S', "Average")

                # Fetch real-time metric value
                namespace, dimension_names = resource_namespace_map.get(resource_type, ('AWS/Unknown', ['ResourceID']))
                dimension_value = entry.get(dimension_names[0], {}).get('S', resource_id)
                metric_value = fetch_metric_value(namespace, metric_name, dimension_names[0], dimension_value)

                # Check health status based on real-time metric value
                if metric_value is not None:
                    health_status = check_health_status(resource_type, metric_name, metric_value)
                else:
                    health_status = 'Unknown'

                # Update resource counts
                resource_counts[resource_type] = resource_counts.get(resource_type, 0) + 1

                # Track unhealthy resources
                if health_status == 'Unhealthy':
                    unhealthy_counts[resource_type] = unhealthy_counts.get(resource_type, 0) + 1

                # Collect metrics for aggregate widgets
                if resource_type not in metrics_data:
                    metrics_data[resource_type] = {'metrics': []}
                
                metrics_data[resource_type]['metrics'].append(
                    build_metric_widget(namespace, metric_name, dimension_names, [dimension_value], 300, statistic)
                )

            except Exception as e:
                logger.error(f"Error processing DynamoDB entry: {e}")

        # Create widgets for resource summary and health status
        widgets = []
        widgets.extend(create_resource_summary_widgets(resource_counts))  # Resource count widgets
        widgets.extend(create_status_summary_widget(resource_counts, unhealthy_counts))  # Health status widgets

        # Create the dashboard body with widgets
        dashboard_body = {"widgets": widgets}

        # Log the final dashboard body for debugging
        logger.info(f"Final dashboard body: {json.dumps(dashboard_body, indent=2)}")

        # Create or update the CloudWatch dashboard
        response = cloudwatch.put_dashboard(
            DashboardName="DynamicResourceDashboard",
            DashboardBody=json.dumps(dashboard_body)
        )

        # Log the CloudWatch response to capture any errors
        logger.info(f"CloudWatch response: {json.dumps(response, indent=2)}")
        logger.info("Successfully created/updated CloudWatch dashboard.")

    except Exception as e:
        logger.error(f"Lambda execution failed: {e}")

    return {
        'statusCode': 200,
        'body': json.dumps('CloudWatch Dashboard creation and update completed successfully')
    }
