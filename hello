import os
import boto3
import requests
import urllib.parse
import time

# === ENVIRONMENT VARIABLES ===
APP_NAME = os.getenv("APP_NAME")               # FCC or PBCS
BACKUP_DATE = os.getenv("BACKUP_DATE")         # dd_mm_yyyy
SECRET_NAME = os.getenv("ORACLE_SECRET_NAME")  # e.g., oracle/backup/credentials
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")   # S3 bucket to store backup

# === ORACLE ENVIRONMENT BASE URLS ===
oracle_urls = {
    "FCC": "https://resolutionlifegroup-test.resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com",
    "PBCS": "https://rlplan2-resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com"
}

# === CONFIG ===
SNAPSHOT_NAME = "Artifact Snapshot.zip"
ENCODED_SNAPSHOT_NAME = urllib.parse.quote(SNAPSHOT_NAME)

def get_credentials():
    client = boto3.client("secretsmanager")
    secret = client.get_secret_value(SecretId=SECRET_NAME)
    creds = eval(secret["SecretString"])  # Or use json.loads
    return creds["username"], creds["password"]

def list_snapshots(base_url, auth):
    list_url = f"{base_url}/interop/rest/v2/files/list"
    print(f"[{APP_NAME}] Listing available snapshots: {list_url}")
    resp = requests.get(list_url, auth=auth)
    resp.raise_for_status()
    snapshots = resp.json().get("items", [])
    for snapshot in snapshots:
        if snapshot["name"] == SNAPSHOT_NAME:
            print(f"[{APP_NAME}] Snapshot '{SNAPSHOT_NAME}' found.")
            return True
    print(f"[{APP_NAME}] Snapshot '{SNAPSHOT_NAME}' not found.")
    return False

def initiate_download(base_url, auth):
    download_url = f"{base_url}/interop/rest/v2/files/download"
    print(f"[{APP_NAME}] Initiating download for {SNAPSHOT_NAME}")
    payload = {"fileName": SNAPSHOT_NAME}
    resp = requests.post(download_url, auth=auth, json=payload)
    resp.raise_for_status()
    job_status_link = next((link["href"] for link in resp.json().get("links", []) if link["rel"] == "Job Status"), None)
    if not job_status_link:
        raise Exception(f"[{APP_NAME}] Job status link not found in response.")
    return job_status_link

def wait_for_download_completion(auth, job_status_link):
    print(f"[{APP_NAME}] Waiting for download job to complete.")
    while True:
        resp = requests.get(job_status_link, auth=auth)
        resp.raise_for_status()
        status = resp.json().get("status")
        if status == 0:
            download_link = next((link["href"] for link in resp.json().get("links", []) if link["rel"] == "Download link"), None)
            if download_link:
                print(f"[{APP_NAME}] Download job completed. Download link obtained.")
                return download_link
            else:
                raise Exception(f"[{APP_NAME}] Download link not found after job completion.")
        elif status == -1:
            print(f"[{APP_NAME}] Download job still in progress. Waiting...")
            time.sleep(10)
        else:
            raise Exception(f"[{APP_NAME}] Download job failed with status: {status}")

def download_snapshot(auth, download_link):
    filename = f"Artifact_Snapshot_{APP_NAME}_{BACKUP_DATE}.zip"
    print(f"[{APP_NAME}] Downloading snapshot from {download_link}")
    with requests.get(download_link, auth=auth, stream=True) as r:
        r.raise_for_status()
        with open(filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
    print(f"[{APP_NAME}] Snapshot downloaded and saved as {filename}")
    return filename

def upload_to_s3(file_path):
    if not S3_BUCKET_NAME:
        raise ValueError("S3_BUCKET_NAME environment variable not set.")
    s3 = boto3.client("s3")
    key = f"oracle-backups/{APP_NAME}/{os.path.basename(file_path)}"
    print(f"[{APP_NAME}] Uploading to s3://{S3_BUCKET_NAME}/{key}")
    s3.upload_file(file_path, S3_BUCKET_NAME, key)
    print(f"[✅] Uploaded to S3: s3://{S3_BUCKET_NAME}/{key}")

def main():
    if APP_NAME not in oracle_urls:
        raise ValueError("Invalid APP_NAME provided")

    base_url = oracle_urls[APP_NAME]
    username, password = get_credentials()
    auth = (username, password)

    try:
        if list_snapshots(base_url, auth):
            job_status_link = initiate_download(base_url, auth)
            download_link = wait_for_download_completion(auth, job_status_link)
            file_path = download_snapshot(auth, download_link)
            upload_to_s3(file_path)
        else:
            print(f"[❌] Snapshot '{SNAPSHOT_NAME}' not available for {APP_NAME}.")
    except Exception as e:
        print(f"[❌] Error during {APP_NAME} backup: {e}")
        raise

if __name__ == "__main__":
    main()
