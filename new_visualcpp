{
  "schemaVersion": "2.2",
  "description": "Remove all older Visual C++ installations if the latest version (provided as a parameter) is installed. If the latest version is not installed, log and do nothing.",
  "parameters": {
    "LatestVersion": {
      "type": "String",
      "description": "The latest Visual C++ version that should be retained. Older versions will be removed if this version is present.",
      "default": "14.42.34438.0"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "RemoveOldVisualCPP",
      "inputs": {
        "runCommand": [
          "# Retrieve the latest version from the parameter",
          "$latestVersionParam = \"{{ LatestVersion }}\"",
          "try {",
          "    $latestVersion = [version]$latestVersionParam",
          "    Write-Output \"Latest Visual C++ version (from parameter): $latestVersion\"",
          "} catch {",
          "    Write-Output \"Error parsing LatestVersion parameter: $latestVersionParam - $($_.Exception.Message)\"",
          "    exit 1",
          "}",
          "",
          "# Query installed Visual C++ packages from the registry",
          "Write-Output \"Querying installed Visual C++ installations...\"",
          "$programs = Get-ItemProperty 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*',",
          "                             'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*' -ErrorAction SilentlyContinue |",
          "    Where-Object { $_.DisplayName -like 'Microsoft Visual C++*' }",
          "Write-Output \"Found $($programs.Count) Visual C++ installations.\"",
          "",
          "# Check if the latest version is installed",
          "$hasLatest = $false",
          "foreach ($program in $programs) {",
          "    if ($program.DisplayVersion) {",
          "        try {",
          "            $currentVersion = [version]$program.DisplayVersion",
          "            if ($currentVersion -eq $latestVersion) {",
          "                $hasLatest = $true",
          "                break",
          "            }",
          "        } catch {",
          "            Write-Output \"Error parsing version for $($program.DisplayName). Skipping.\"",
          "        }",
          "    }",
          "}",
          "",
          "if (-not $hasLatest) {",
          "    Write-Output \"Latest Visual C++ version $latestVersion is not installed. No removals will be performed.\"",
          "    exit 0",
          "}",
          "",
          "Write-Output \"Latest Visual C++ version is installed. Proceeding to remove older versions...\"",
          "",
          "# Loop through each installed Visual C++ and remove if its version does not match the latest",
          "foreach ($program in $programs) {",
          "    try {",
          "        if ($program.DisplayVersion) {",
          "            $currentVersion = [version]$program.DisplayVersion",
          "            if ($currentVersion -ne $latestVersion) {",
          "                Write-Output \"Attempting to remove $($program.DisplayName) (version $($program.DisplayVersion)).\"",
          "                if ($program.UninstallString) {",
          "                    $uninstallCmd = $program.UninstallString",
          "                    Write-Output \"Uninstall command: $uninstallCmd\"",
          "                    if ($uninstallCmd -notlike '*quiet*') {",
          "                        $uninstallCmd += ' /quiet /norestart'",
          "                    }",
          "                    try {",
          "                        $process = Start-Process -FilePath 'cmd.exe' -ArgumentList '/c', $uninstallCmd -Wait -PassThru -ErrorAction Stop",
          "                        # Wait briefly to allow uninstall to complete",
          "                        Start-Sleep -Seconds 10",
          "                        # Re-check the registry for the package",
          "                        $stillInstalled = Get-ItemProperty 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*',",
          "                                                     'HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*' -ErrorAction SilentlyContinue |",
          "                            Where-Object { $_.DisplayName -eq $program.DisplayName }",
          "                        if ($stillInstalled) {",
          "                            Write-Output \"Package $($program.DisplayName) (version $($program.DisplayVersion)) still present after uninstall attempt.\"",
          "                        } else {",
          "                            Write-Output \"Successfully removed $($program.DisplayName) (version $($program.DisplayVersion)).\"",
          "                        }",
          "                    } catch {",
          "                        Write-Output \"Error executing uninstall command for $($program.DisplayName): $($_.Exception.Message)\"",
          "                    }",
          "                } else {",
          "                    Write-Output \"No uninstall string found for $($program.DisplayName).\"",
          "                }",
          "            } else {",
          "                Write-Output \"Retaining $($program.DisplayName) as it matches the latest version ($($program.DisplayVersion)).\"",
          "            }",
          "        }",
          "    } catch {",
          "        Write-Output \"Error processing $($program.DisplayName): $($_.Exception.Message)\"",
          "    }",
          "}",
          "Write-Output \"Visual C++ removal script completed.\""
        ]
      }
    }
  ]
}
