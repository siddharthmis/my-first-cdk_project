Write a lambda code in Python to tag EBS volume and snapshots by copying the tags from parent EC2 instance.
ChatGPT
Certainly! You can create an AWS Lambda function in Python to tag EBS volumes and their associated snapshots by copying the tags from their parent EC2 instance. Here's an example Lambda function that achieves this using Boto3, the AWS SDK for Python:

python
Copy code
import boto3

def lambda_handler(event, context):
    # Initialize the AWS clients
    ec2_client = boto3.client('ec2')

    # Get the list of all EC2 instances
    instances = ec2_client.describe_instances()

    # Loop through each instance to tag its EBS volumes and snapshots
    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            instance_id = instance['InstanceId']
            
            # Get the instance tags
            instance_tags = ec2_client.describe_tags(
                Filters=[{'Name': 'resource-id', 'Values': [instance_id]}]
            )['Tags']
            
            # Get attached volumes for the instance
            volumes = ec2_client.describe_volumes(Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}])
            
            # Tag EBS volumes and their snapshots
            for volume in volumes['Volumes']:
                volume_id = volume['VolumeId']
                
                # Tag the EBS volume with instance tags
                ec2_client.create_tags(
                    Resources=[volume_id],
                    Tags=instance_tags
                )
                
                # Get snapshots for the EBS volume
                snapshots = ec2_client.describe_snapshots(Filters=[{'Name': 'volume-id', 'Values': [volume_id]}])
                
                # Tag snapshots with instance tags
                for snapshot in snapshots['Snapshots']:
                    snapshot_id = snapshot['SnapshotId']
                    ec2_client.create_tags(
                        Resources=[snapshot_id],
                        Tags=instance_tags
                    )

    return {
        'statusCode': 200,
        'body': 'Tags copied successfully!'
    }
This Lambda function retrieves all EC2 instances and their associated EBS volumes and snapshots. For each instance, it extracts the tags and applies them to the corresponding EBS volumes and snapshots.

Ensure the Lambda function has the necessary permissions (e.g., ec2:DescribeInstances, ec2:DescribeVolumes, ec2:DescribeSnapshots, ec2:CreateTags) to read instance information, volumes, snapshots, and create tags. Also, consider configuring proper error handling and logging based on your specific use case and requirements.

User
Write a lambda code in Python to tag EBS volume and snapshots by copying the tags from parent EC2 instance if not already present.
ChatGPT
Certainly! Below is an AWS Lambda function written in Python that tags EBS volumes and their associated snapshots by copying tags from their parent EC2 instance, but only if those tags don't already exist on the volumes or snapshots:

python
Copy code
import boto3

def lambda_handler(event, context):
    # Initialize the AWS clients
    ec2_client = boto3.client('ec2')

    # Get the list of all EC2 instances
    instances = ec2_client.describe_instances()

    # Loop through each instance to tag its EBS volumes and snapshots
    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            instance_id = instance['InstanceId']
            
            # Get the instance tags
            instance_tags = ec2_client.describe_tags(
                Filters=[{'Name': 'resource-id', 'Values': [instance_id]}]
            )['Tags']
            
            # Get attached volumes for the instance
            volumes = ec2_client.describe_volumes(Filters=[{'Name': 'attachment.instance-id', 'Values': [instance_id]}])
            
            # Tag EBS volumes and their snapshots
            for volume in volumes['Volumes']:
                volume_id = volume['VolumeId']
                
                # Check if volume already has instance tags
                existing_tags = ec2_client.describe_tags(
                    Filters=[
                        {'Name': 'resource-id', 'Values': [volume_id]},
                        {'Name': 'key', 'Values': [tag['Key'] for tag in instance_tags]}
                    ]
                )['Tags']
                
                if not existing_tags:
                    # Tag the EBS volume with instance tags
                    ec2_client.create_tags(
                        Resources=[volume_id],
                        Tags=instance_tags
                    )
                    
                    # Get snapshots for the EBS volume
                    snapshots = ec2_client.describe_snapshots(Filters=[{'Name': 'volume-id', 'Values': [volume_id]}])
                    
                    # Tag snapshots with instance tags
                    for snapshot in snapshots['Snapshots']:
                        snapshot_id = snapshot['SnapshotId']
                        ec2_client.create_tags(
                            Resources=[snapshot_id],
                            Tags=instance_tags
                        )

    return {
        'statusCode': 200,
        'body': 'Tags copied successfully!'
    }
This Lambda function checks if the tags from the EC2 instance already exist on the EBS volumes or their associated snapshots. If the tags are not present, it then copies the instance tags to the volumes and snapshots.

Ensure the Lambda function has appropriate IAM permissions (ec2:DescribeInstances, ec2:DescribeVolumes, ec2:DescribeSnapshots, ec2:CreateTags, ec2:DescribeTags) to read instance information, volumes, snapshots, and create tags. Adjust the error handling or logging as per your specific use case requirements.

User
Write a lambda code in Python to tag cloudwatch log groups by copying the tags from the parent Lambda function if not already present.
ChatGPT
Certainly! Below is an example of an AWS Lambda function in Python that tags CloudWatch log groups by copying tags from their parent Lambda function, but only if those tags don't already exist on the log groups:

python
Copy code
import boto3

def lambda_handler(event, context):
    # Initialize AWS clients
    lambda_client = boto3.client('lambda')
    logs_client = boto3.client('logs')

    # Get list of Lambda functions
    functions = lambda_client.list_functions()

    # Loop through each Lambda function to tag associated log groups
    for function in functions['Functions']:
        function_name = function['FunctionName']
        
        # Get Lambda function tags
        function_tags = lambda_client.list_tags(Resource=function['FunctionArn'])['Tags']

        # Get associated log group name for the Lambda function
        log_group_name = '/aws/lambda/' + function_name
        
        # Check if log group already has function tags
        existing_tags = logs_client.list_tags_log_group(logGroupName=log_group_name)['tags']

        # Tag log group if function tags are not present
        if not all(tag in existing_tags.items() for tag in function_tags.items()):
            logs_client.tag_log_group(
                logGroupName=log_group_name,
                tags=function_tags
            )

    return {
        'statusCode': 200,
        'body': 'Tags copied successfully to log groups!'
    }
This Lambda function retrieves a list of Lambda functions and their associated tags. It then identifies the corresponding CloudWatch log groups for each Lambda function and checks if the log group already has the function tags. If the tags are not present on the log group, it copies the tags from the Lambda function to the log group.

Ensure that the Lambda function has the necessary permissions (lambda:ListFunctions, lambda:ListTags, logs:TagLogGroup, logs:ListTagsLogGroup) to list Lambda functions, retrieve function tags, and tag CloudWatch log groups. Adjust the error handling or logging as needed for your use case.





