def check_snapshot_exists(url, auth, app_name):
    try:
        resp = requests.get(url, auth=auth, timeout=30)
        resp.raise_for_status()
        snapshots = resp.json().get('items', [])

        for snap in snapshots:
            if snap.get('name') == 'Artifact Snapshot':
                size_bytes = snap.get('size', 0)
                size_mb = round(size_bytes / (1024 * 1024), 2)
                created_time = snap.get('createdTime', 'N/A')
                print(f"[{app_name}] Backup found.")
                print(f"[{app_name}] Size: {size_mb} MB")
                print(f"[{app_name}] Created Time: {created_time}")
                return True

        print(f"[{app_name}] 'Artifact Snapshot' not found in the snapshot list.")
        return False

    except Exception as e:
        print(f"[{app_name}] Error checking snapshots: {e}")
        return False


###########################3

Yes, I can help you build this end-to-end automation. Here's a high-level breakdown of what we'll implement:

‚úÖ Architecture Overview
Lambda Function

Triggered manually or on a schedule (e.g., daily).

Logs into Oracle FCC and Oracle Planning using the service account.

Checks for the presence of the "Artifact Snapshot".

Triggers a CodeBuild project if the snapshot exists.

AWS CodeBuild Project

Downloads the backup via Oracle REST APIs.

Renames it using the format:

Artifact Snapshot_FCC_dd_mm_yyyy.zip

Artifact Snapshot_PBCS_dd_mm_yyyy.zip

Uploads it to the designated SharePoint folder via Graph API.

Notification

Lambda sends an SES email to a distribution list confirming success or failure.

üì¶ Deliverables
lambda_function.py to check snapshot and trigger CodeBuild.

buildspec.yml and CodeBuild project setup (Python environment).

Python code for CodeBuild to:

Authenticate with Oracle REST API.

Download and rename the file.

Authenticate with SharePoint (via Microsoft Graph).

Upload the file to the correct folder.

utils.py for common functions like timestamp formatting and retry logic.

IAM policies for Lambda, CodeBuild, and service roles.

Email template for SES notification.

Optionally: CloudWatch alarms/logs, retries for robustness.

üîí Assumptions & Requirements
To proceed, I‚Äôll need the following:

Oracle Auth Details:

Do we use Basic Auth or OAuth2?

Is MFA involved for oracle.backup@resolutionlife.com?

SharePoint Access:

Do you have app registration for Microsoft Graph API?

If yes, I‚Äôll need:

client_id

client_secret

tenant_id

Site/drive/item IDs if available

Email Details:

SES is set up in the region?

DL email address?

Would you like me to start with the Lambda function code first, including config placeholders for auth and sharepoint? Or do you want me to set up the CodeBuild logic and Oracle API interaction first?

Let me know your preference, and feel free to drop any credentials/configs you‚Äôre allowed to share (redacted if needed).







You said:
Here are the details you need:
Oracle Auth Details:
Do we use Basic Auth or OAuth2? - It is simply a username and password authentication. Let's store the password in the secrets manager and use it from there.
Is MFA involved for oracle.backup@resolutionlife.com? - No
SharePoint Access: You can create a placeholder for the details needed, and I'll get it filled in later


ChatGPT said:
Memory updated
Perfect! Thanks for confirming. Here's how we'll proceed:

‚úÖ Step 1: Lambda Function - Overview
This Lambda will:

Retrieve credentials from Secrets Manager.

Check for the presence of the backup in both Oracle FCC and Planning.

If found, trigger a CodeBuild project with app name (FCC or PBCS) and date.

After CodeBuild completes, send an SES email to notify completion.

üìÅ File Structure (Initial Plan)
graphql
Copy
Edit
oracle_backup_automation/
‚îú‚îÄ‚îÄ lambda_function.py       # Main Lambda handler
‚îú‚îÄ‚îÄ buildspec.yml            # CodeBuild instructions
‚îú‚îÄ‚îÄ codebuild_script.py      # Download and SharePoint upload logic
‚îú‚îÄ‚îÄ utils.py                 # Helpers: date formatting, logging
‚îî‚îÄ‚îÄ README.md                # Setup instructions
üõ†Ô∏è Starting with lambda_function.py
I'll now generate the initial version of the Lambda function.

Here‚Äôs the first version of lambda_function.py, which:

Authenticates with Oracle using credentials from AWS Secrets Manager.

Checks if the "Artifact Snapshot" is available in FCC and Planning.

If available, triggers a CodeBuild project with app name and date.

Sends a success/failure email via SES.

python
Copy
Edit
import json
import boto3
import requests
from datetime import datetime
import os

secrets_client = boto3.client('secretsmanager')
codebuild_client = boto3.client('codebuild')
ses_client = boto3.client('ses')

# Environment Variables
SECRET_NAME = os.getenv("ORACLE_SECRET_NAME")  # e.g., "oracle/backup/credentials"
FCC_URL = "https://resolutionlifegroup-test.resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com/interop/rest/11.1.2.3.600/applicationsnapshots"
PBCS_URL = "https://rlplan2-resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com/interop/rest/11.1.2.3.600/applicationsnapshots"
CODEBUILD_PROJECT = os.getenv("CODEBUILD_PROJECT_NAME")
EMAIL_DL = os.getenv("NOTIFICATION_EMAIL_DL")  # e.g., "oracle.backup@resolutionlife.com"

def get_secret():
    response = secrets_client.get_secret_value(SecretId=SECRET_NAME)
    secret_dict = json.loads(response['SecretString'])
    return secret_dict['username'], secret_dict['password']

def check_snapshot_exists(url, auth):
    try:
        resp = requests.get(url, auth=auth, timeout=30)
        resp.raise_for_status()
        snapshots = resp.json().get('items', [])
        for snap in snapshots:
            if snap.get('name') == 'Artifact Snapshot':
                return True
        return False
    except Exception as e:
        print(f"Failed to check snapshot at {url}: {e}")
        return False

def trigger_codebuild(app_name, backup_date_str):
    env_vars = [
        {'name': 'APP_NAME', 'value': app_name, 'type': 'PLAINTEXT'},
        {'name': 'BACKUP_DATE', 'value': backup_date_str, 'type': 'PLAINTEXT'}
    ]
    response = codebuild_client.start_build(
        projectName=CODEBUILD_PROJECT,
        environmentVariablesOverride=env_vars
    )
    return response['build']['id']

def send_email(subject, body):
    ses_client.send_email(
        Source=EMAIL_DL,
        Destination={'ToAddresses': [EMAIL_DL]},
        Message={
            'Subject': {'Data': subject},
            'Body': {'Text': {'Data': body}}
        }
    )

def lambda_handler(event, context):
    username, password = get_secret()
    auth = (username, password)

    backup_date_str = datetime.utcnow().strftime('%d_%m_%Y')
    success_apps = []
    failure_apps = []

    for app, url in [("FCC", FCC_URL), ("PBCS", PBCS_URL)]:
        if check_snapshot_exists(url, auth):
            try:
                build_id = trigger_codebuild(app, backup_date_str)
                success_apps.append(f"{app} (Build ID: {build_id})")
            except Exception as e:
                print(f"Error triggering CodeBuild for {app}: {e}")
                failure_apps.append(app)
        else:
            failure_apps.append(app)

    subject = "Oracle Backup Automation - Summary"
    body = f"""Backup Job Summary ({backup_date_str})\n
Successful: {', '.join(success_apps) or 'None'}
Failed/Missing: {', '.join(failure_apps) or 'None'}
    """
    send_email(subject, body)
    return {"statusCode": 200, "body": json.dumps({"success": success_apps, "failed": failure_apps})}
üìù Next Steps
Would you like me to now:

Draft the CodeBuild buildspec.yml and codebuild_script.py?

Or set up the deployment (IAM roles, environment variables, etc.)?

Let me know how you'd like to proceed.






You said:
let's do however you like


ChatGPT said:
Awesome ‚Äî I‚Äôll guide you through a smooth and complete build-out. Since the Lambda is ready, let‚Äôs move on to the CodeBuild side, which will:

üîÑ CodeBuild Responsibilities
For each app (FCC or PBCS):

Download Artifact Snapshot using Oracle REST API.

Rename the file to match the format:

Artifact Snapshot_FCC_dd_mm_yyyy.zip

Artifact Snapshot_PBCS_dd_mm_yyyy.zip

Upload the file to the correct SharePoint folder using Microsoft Graph API (we‚Äôll use a placeholder).

Log all steps, fail gracefully.

‚úÖ buildspec.yml
This tells CodeBuild what to run.

yaml
Copy
Edit
version: 0.2

env:
  variables:
    APP_NAME: ""
    BACKUP_DATE: ""

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - pip install -r requirements.txt

  build:
    commands:
      - echo "Running Oracle backup script for $APP_NAME on $BACKUP_DATE"
      - python codebuild_script.py
üêç codebuild_script.py
Here‚Äôs the initial draft of the Python script that:

Authenticates using Secrets Manager.

Downloads the snapshot via Oracle REST.

Renames and uploads to SharePoint.

python
Copy
Edit
import requests
import boto3
import os
from datetime import datetime

# Config
SECRET_NAME = os.getenv("ORACLE_SECRET_NAME", "oracle/backup/credentials")
APP_NAME = os.getenv("APP_NAME")  # FCC or PBCS
BACKUP_DATE = os.getenv("BACKUP_DATE")  # dd_mm_yyyy

oracle_urls = {
    "FCC": "https://resolutionlifegroup-test.resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com",
    "PBCS": "https://rlplan2-resolutionlifegroup.epm.us-phoenix-1.ocs.oraclecloud.com"
}

sharepoint_urls = {
    "FCC": "https://resolutionlifeuk.sharepoint.com/.../FCC12Obackups/Application_Backup",
    "PBCS": "https://resolutionlifeuk.sharepoint.com/.../PBCS%620backups/Application_Backup"
}

def get_credentials():
    client = boto3.client('secretsmanager')
    resp = client.get_secret_value(SecretId=SECRET_NAME)
    secrets = eval(resp['SecretString'])  # use json.loads if possible
    return secrets['username'], secrets['password']

def download_snapshot(base_url, auth):
    download_url = f"{base_url}/interop/rest/11.1.2.3.600/applicationsnapshots/Artifact Snapshot/download"
    headers = {'Content-Type': 'application/json'}
    response = requests.get(download_url, auth=auth, headers=headers, stream=True)
    response.raise_for_status()
    filename = f"Artifact Snapshot_{APP_NAME}_{BACKUP_DATE}.zip"
    with open(filename, 'wb') as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
    print(f"Downloaded and saved as {filename}")
    return filename

def upload_to_sharepoint(file_path):
    print(f"Uploading {file_path} to SharePoint folder for {APP_NAME}")
    # PLACEHOLDER: Replace with Microsoft Graph upload logic
    # e.g., get access token, POST to /drive/items/root:/folder:/children
    print("[Placeholder] SharePoint upload successful.")

def main():
    if APP_NAME not in oracle_urls:
        raise ValueError("Invalid APP_NAME provided to CodeBuild")

    username, password = get_credentials()
    base_url = oracle_urls[APP_NAME]
    auth = (username, password)

    try:
        file_path = download_snapshot(base_url, auth)
        upload_to_sharepoint(file_path)
    except Exception as e:
        print(f"Error: {e}")
        raise

if __name__ == "__main__":
    main()
üì¶ requirements.txt
txt
Copy
Edit
requests
boto3
‚úÖ What‚Äôs Next?
Let me know if you'd like to:

Deploy this via CloudFormation/CDK/IaC?

Add placeholder logic for SharePoint Graph API (I can show exactly what to use)?

Get the IAM roles and CodeBuild config set up?

Or I can wrap the entire thing into a deployable README/playbook.






You said:
Let's do:
placeholder logic for SharePoint Graph API
Get the IAM roles and CodeBuild config set up


ChatGPT said:
Perfect ‚Äî let‚Äôs knock both out.

üîê 1. Placeholder Logic for SharePoint Graph API
We‚Äôll assume your SharePoint access will use a registered Microsoft Graph App (OAuth2 flow). The following functions can be slotted into codebuild_script.py.

‚ûï Add to codebuild_script.py:
python
Copy
Edit
import requests

# Placeholder values for Microsoft Graph Auth ‚Äì replace these
SHAREPOINT_TENANT_ID = os.getenv("SP_TENANT_ID", "your-tenant-id")
SHAREPOINT_CLIENT_ID = os.getenv("SP_CLIENT_ID", "your-client-id")
SHAREPOINT_CLIENT_SECRET = os.getenv("SP_CLIENT_SECRET", "your-client-secret")
SHAREPOINT_SITE_ID = os.getenv("SP_SITE_ID", "your-site-id")
SHAREPOINT_DRIVE_ID = os.getenv("SP_DRIVE_ID", "your-drive-id")

def get_graph_token():
    token_url = f"https://login.microsoftonline.com/{SHAREPOINT_TENANT_ID}/oauth2/v2.0/token"
    data = {
        'client_id': SHAREPOINT_CLIENT_ID,
        'client_secret': SHAREPOINT_CLIENT_SECRET,
        'grant_type': 'client_credentials',
        'scope': 'https://graph.microsoft.com/.default'
    }
    response = requests.post(token_url, data=data)
    response.raise_for_status()
    token = response.json()['access_token']
    return token

def upload_to_sharepoint(file_path):
    print(f"[Placeholder] Uploading {file_path} to SharePoint...")

    token = get_graph_token()
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/octet-stream'
    }

    folder_path = f"/Application_Backup/{os.path.basename(file_path)}"
    upload_url = f"https://graph.microsoft.com/v1.0/sites/{SHAREPOINT_SITE_ID}/drives/{SHAREPOINT_DRIVE_ID}/root:{folder_path}:/content"

    with open(file_path, 'rb') as f:
        response = requests.put(upload_url, headers=headers, data=f)
        response.raise_for_status()

    print(f"[Success] File uploaded to SharePoint: {folder_path}")
üìù To Do:

Replace placeholders (SP_TENANT_ID, SP_CLIENT_ID, etc.) with your real values as environment variables in CodeBuild.

üîê 2. IAM Roles and CodeBuild Configuration
üîß A. IAM Role for Lambda
Lambda needs:

SecretsManager (GetSecretValue)

CodeBuild (StartBuild)

SES (SendEmail)

Policy for Lambda:
json
Copy
Edit
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "secretsmanager:GetSecretValue",
        "codebuild:StartBuild",
        "ses:SendEmail"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
üîß B. IAM Role for CodeBuild
CodeBuild needs:

SecretsManager (to get Oracle creds)

CloudWatch Logs, S3 (standard)

No AWS access beyond that (unless SharePoint token is stored in Secrets Manager too)

Policy for CodeBuild:
json
Copy
Edit
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
Use AWS-managed roles for:

AWSCodeBuildDeveloperAccess

CloudWatchLogsFullAccess (optional if logging needed)

üîß C. CodeBuild Project Config (Key Points)
Runtime: Standard Ubuntu, Python 3.11

Environment Variables:

APP_NAME, BACKUP_DATE ‚Äî overridden by Lambda.

ORACLE_SECRET_NAME, SP_TENANT_ID, SP_CLIENT_ID, etc.

Artifacts: None (we don‚Äôt store output in S3).

‚úÖ Final Steps
Let me know if you want:

CloudFormation template for deploying both Lambda and CodeBuild.

Terraform/CDK version of the setup.

Or a single README.md to hand off to your devops team for infra setup?

You‚Äôre super close ‚Äî just say the word, and I‚Äôll wrap the full deployment package for you.






You said:
let me try this first and I'll then get back to you.


ChatGPT said:
Sounds like a plan! üëç

You've got a solid starting point now ‚Äî the Lambda checks, triggers, and notifies, while CodeBuild handles download + upload with placeholder support for SharePoint via Microsoft Graph.

When you're ready:

I can help wrap this in a deployable template,

Troubleshoot anything you hit,

Or assist with testing/integration steps.

Ping me anytime. Good luck testing it out! üöÄ






