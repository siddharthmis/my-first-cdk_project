Certainly! Here's an example of a PowerShell script that can be used to ensure that the AWS Systems Manager (SSM) agent is always running and reporting on an EC2 Windows instance:

powershell
Copy code
# Check if the SSM agent is running
function Check-SSMAgent {
    $status = Get-Service -Name "AmazonSSMAgent" -ErrorAction SilentlyContinue
    if ($status -eq $null -or $status.Status -ne "Running") {
        return $false
    }
    return $true
}

# Start the SSM agent
function Start-SSMAgent {
    Start-Service -Name "AmazonSSMAgent" -ErrorAction SilentlyContinue
    if ($? -ne $true) {
        return $false
    }
    return $true
}

# Restart the SSM agent
function Restart-SSMAgent {
    Restart-Service -Name "AmazonSSMAgent" -ErrorAction SilentlyContinue
    if ($? -ne $true) {
        return $false
    }
    return $true
}

# Main script logic
if (Check-SSMAgent) {
    Write-Host "SSM agent is already running."
}
else {
    Write-Host "SSM agent is not running. Starting..."
    if (Start-SSMAgent) {
        Write-Host "SSM agent started successfully."
    }
    else {
        Write-Host "Failed to start SSM agent."
        exit 1
    }
}

# Check if the SSM agent is reporting
$agentStatus = & "C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\StatusReporter.exe" -c
if ($agentStatus -ne "Online") {
    Write-Host "SSM agent is not reporting. Restarting..."
    if (Restart-SSMAgent) {
        Write-Host "SSM agent restarted successfully."
    }
    else {
        Write-Host "Failed to restart SSM agent."
        exit 1
    }
}

Write-Host "SSM agent is running and reporting."
Save the script in a file (e.g., ssm_agent_check.ps1) and run it on your EC2 Windows instance.

The script checks if the SSM agent is running using the Get-Service cmdlet and starts it if it's not running. It then uses the StatusReporter.exe utility located in the default installation path of the SSM agent to check if the agent is reporting. If it's not reporting, the script restarts the SSM agent using the Restart-Service cmdlet.

Note that the script assumes that the SSM agent service is named "AmazonSSMAgent" and the StatusReporter.exe utility is located in the default installation path. Modify these values if necessary.

Please exercise caution when making changes to critical services on your EC2 Windows instance, and thoroughly test the script before running it in production environments.





User
write a powershell script to schedule a powershell script to run daily on Amazon EC2 windows server
ChatGPT
To schedule a PowerShell script to run daily on an Amazon EC2 Windows server, you can utilize the Windows Task Scheduler. Here's an example PowerShell script that creates a scheduled task to run a PowerShell script daily:

powershell
Copy code
# Define the script to be executed
$scriptPath = "C:\Path\to\your\script.ps1"

# Create a new scheduled task
$action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`""
$trigger = New-ScheduledTaskTrigger -Daily -At "12:00 AM"
$settings = New-ScheduledTaskSettingsSet
$task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings

# Register the scheduled task
Register-ScheduledTask -TaskName "DailyScript" -TaskPath "\" -User "SYSTEM" -Password $null -Action $action -Trigger $trigger -Settings $settings

# Run the scheduled task immediately
Start-ScheduledTask -TaskName "DailyScript"
Replace "C:\Path\to\your\script.ps1" with the actual path to your PowerShell script that you want to schedule.

This script creates a new scheduled task using the New-ScheduledTask cmdlet, specifying the PowerShell script to be executed as the action. In this example, the task is scheduled to run daily at 12:00 AM using the New-ScheduledTaskTrigger cmdlet. The task is registered and assigned to the "SYSTEM" user using the Register-ScheduledTask cmdlet.

Finally, the script starts the scheduled task immediately using the Start-ScheduledTask cmdlet. This will trigger the task to run once immediately after it's registered.

Save the script in a file (e.g., schedule_script.ps1) and run it on your EC2 Windows instance. The scheduled task named "DailyScript" will be created and configured to run your PowerShell script daily.

You can customize the schedule by modifying the $trigger variable and adjust the task name and path as desired. Remember to replace the script path with the correct path to your actual script.






