import boto3
import json
from datetime import datetime
from service_modules import alb_metrics, aurora_metrics, ec2_metrics, fsx_metrics, macie_metrics, neptune_metrics, opensearch_metrics, outposts_metrics, redshift_metrics

# Initialize AWS clients
dynamodb = boto3.client('dynamodb')

# Function to update or insert metrics in DynamoDB
def update_or_insert_metric_in_dynamodb(resource_id, resource_type, metric_name, namespace, threshold, statistic, comparison_operator, period, datapoints_to_alarm, evaluation_periods, dimensions):
    try:
        # Use update_item to either update the existing row or insert a new one
        dynamodb.update_item(
            TableName='ResourceMetrics',
            Key={
                'ResourceID': {'S': resource_id},
                'MetricName': {'S': metric_name}
            },
            UpdateExpression="""
                SET 
                    ResourceType = :resource_type,
                    Namespace = :namespace,
                    Threshold = :threshold,
                    Statistic = :statistic,
                    ComparisonOperator = :comparison_operator,
                    Period = :period,
                    DatapointsToAlarm = :datapoints_to_alarm,
                    EvaluationPeriods = :evaluation_periods,
                    Dimensions = :dimensions
            """,
            ExpressionAttributeValues={
                ':resource_type': {'S': resource_type},
                ':namespace': {'S': namespace},
                ':threshold': {'N': str(threshold)},
                ':statistic': {'S': statistic},
                ':comparison_operator': {'S': comparison_operator},
                ':period': {'N': str(period)},
                ':datapoints_to_alarm': {'N': str(datapoints_to_alarm)},
                ':evaluation_periods': {'N': str(evaluation_periods)},
                ':dimensions': {'S': json.dumps(dimensions)}  # Store dimensions as JSON string
            },
            ReturnValues="ALL_NEW"
        )
        print(f"Successfully updated or inserted entry for ResourceID {resource_id} and MetricName {metric_name}.")
    except dynamodb.exceptions.ConditionalCheckFailedException:
        print(f"Row already exists for ResourceID {resource_id} and MetricName {metric_name}. Updating the row.")
    except Exception as e:
        print(f"Error updating or inserting entry in DynamoDB for ResourceID {resource_id}: {e}")

# Load default metrics from a JSON configuration file
def load_default_metrics():
    try:
        with open('default_metrics.json') as f:
            default_metrics = json.load(f)
        return default_metrics
    except Exception as e:
        print(f"Error loading default metrics: {e}")
        return {}

# Main Lambda handler function
def lambda_handler(event, context):
    # Load default metrics configuration
    default_metrics = load_default_metrics()

    if not default_metrics:
        return {
            'statusCode': 500,
            'body': json.dumps('Failed to load default metrics')
        }

    # Collect metrics for each service and store them in DynamoDB
    try:
        alb_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['ALB'])
        aurora_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['Aurora'])
        ec2_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['EC2'])
        fsx_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['FSx'])
        macie_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['Macie'])
        neptune_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['Neptune'])
        opensearch_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['OpenSearch'])
        outposts_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['Outposts'])
        redshift_metrics.collect_metrics(update_or_insert_metric_in_dynamodb, default_metrics['Redshift'])

        print("Metrics collected and inserted/updated in DynamoDB successfully.")

    except Exception as e:
        print(f"Error collecting metrics or inserting into DynamoDB: {e}")

    return {
        'statusCode': 200,
        'body': json.dumps('Metrics collection and DynamoDB update completed')
    }
