import json

def y_axis_percent():
    return {"left": {"min": 0, "max": 100}, "right": {"showUnits": False}}

def y_axis_count(max_val=1000):
    return {"left": {"min": 0, "max": max_val}, "right": {"showUnits": False}}

def build_patch_dashboard(data):
    widgets = []
    x, y = 0, 0

    if data:
        data.sort(key=lambda d: (d['AccountName'], d['Region']))
        avg_percent = round(sum(d['Percent'] for d in data) / len(data), 2)
        avg_lag = round(sum(d['PatchLagDays'] for d in data) / len(data), 2)
        widgets.append({
            "type": "text",
            "x": 0, "y": y,
            "width": 24, "height": 5,
            "properties": {
                "markdown": f"""# üõ°Ô∏è **PATCH COMPLIANCE OVERVIEW**

---
‚úÖ **Avg Compliance:** `{avg_percent}%`  
‚è±Ô∏è **Avg Patch Lag:** `{avg_lag} days`  
üåé **Regions:** `{len(data)}`  
---"""
            }
        })
        y += 5

    for entry in data:
        widgets.extend([
            {
                "type": "metric", "x": 0, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "PatchCompliance", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Average", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Compliance %",
                    "yAxis": y_axis_percent()
                }
            },
            {
                "type": "metric", "x": 6, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "PatchLagDays", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Average", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Patch Lag",
                    "yAxis": y_axis_count(60)
                }
            },
            {
                "type": "metric", "x": 12, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "SSMManagedPercent", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Average", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] SSM Reporting %",
                    "yAxis": y_axis_percent()
                }
            },
            {
                "type": "metric", "x": 18, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "NonCompliantEC2Count", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "singleValue", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Noncompliant EC2s",
                    "yAxis": y_axis_count()
                }
            }
        ])
        y += 6

    return json.dumps({"widgets": widgets})


def build_backup_dashboard(data):
    widgets = []
    x, y = 0, 0

    if data:
        data.sort(key=lambda d: (d['AccountName'], d['Region']))
        total_resources = sum(d['ProtectedCount'] for d in data)
        widgets.append({
            "type": "text",
            "x": 0, "y": y,
            "width": 24, "height": 5,
            "properties": {
                "markdown": f"""# üì¶ **BACKUP STATUS OVERVIEW**

---
üßæ **Total Protected Resources:** `{total_resources}`  
üìä **Regions Monitored:** `{len(data)}`  
---"""
            }
        })
        y += 5

    for entry in data:
        widgets.extend([
            {
                "type": "metric", "x": 0, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "ProtectedResourceCount", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Protected Resources",
                    "yAxis": y_axis_count()
                }
            },
            {
                "type": "metric", "x": 6, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [
                        ["CentralDashboards", "JobStatus", "AccountId", entry["AccountId"], "Region", entry["Region"], "Status", "COMPLETED"],
                        ["...", "Status", "FAILED"],
                        ["...", "Status", "RUNNING"],
                        ["...", "Status", "ABORTED"]
                    ],
                    "view": "pie", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Job Statuses"
                }
            },
            {
                "type": "metric", "x": 12, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "JobHealth", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Average", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Job Health (%)",
                    "yAxis": y_axis_percent()
                }
            },
            {
                "type": "metric", "x": 18, "y": y, "width": 6, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "JobStatus", "AccountId", entry["AccountId"], "Region", entry["Region"], "Status", "EXPIRED"]],
                    "view": "bar", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Expired Jobs",
                    "yAxis": y_axis_count()
                }
            }
        ])
        y += 6

        # Failure reasons
        reasons = entry.get("Reasons", {})
        if reasons:
            top = sorted(reasons.items(), key=lambda x: x[1], reverse=True)[:5]
            lines = [f"- `{r}`: {c}" for r, c in top]
            widgets.append({
                "type": "text", "x": 0, "y": y, "width": 12, "height": 6,
                "properties": {
                    "markdown": f"### ‚ùå Top Failure Reasons\n" + "\n".join(lines)
                }
            })

        resources = entry.get("ResourceFailures", {})
        if resources:
            top = sorted(resources.items(), key=lambda x: x[1], reverse=True)[:5]
            lines = [f"- `{r}`: {c}" for r, c in top]
            widgets.append({
                "type": "text", "x": 12, "y": y, "width": 12, "height": 6,
                "properties": {
                    "markdown": f"### üìõ Problematic Resources\n" + "\n".join(lines)
                }
            })

        y += 6

        trend = entry.get("Trend", {})
        if trend:
            metrics = []
            for day, count in sorted(trend.items())[-4:]:
                metrics.append(["CustomBackupNamespace", "BackupJobs", "Date", day, {"value": count}])
            if metrics:
                widgets.append({
                    "type": "metric", "x": 0, "y": y, "width": 24, "height": 6,
                    "properties": {
                        "metrics": metrics,
                        "view": "timeSeries",
                        "stat": "Sum",
                        "region": "us-east-1",
                        "title": f"{entry['AccountName']} [{entry['Region']}] Job Trend (Last 4 Days)"
                    }
                })
                y += 6

    return json.dumps({"widgets": widgets})
