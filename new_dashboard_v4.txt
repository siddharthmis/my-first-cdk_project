import boto3
import json
import logging

# Initialize AWS clients
dynamodb = boto3.client('dynamodb')
cloudwatch = boto3.client('cloudwatch')
logs_client = boto3.client('logs')

# Setup logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Dictionary to map resource types to the correct dimension name and namespace
dimension_name_map = {
    'EC2': ('InstanceId', 'AWS/EC2'),
    'ALB': ('LoadBalancer', 'AWS/ApplicationELB'),
    'ALBTarget': ('TargetGroup', 'AWS/ApplicationELB'),
    'RDS': ('DBInstanceIdentifier', 'AWS/RDS'),
    'Lambda': ('FunctionName', 'AWS/Lambda'),
    'ECS': ('ClusterName', 'AWS/ECS'),
    'Elasticache': ('CacheClusterId', 'AWS/ElastiCache'),
    'Redshift': ('ClusterIdentifier', 'AWS/Redshift'),
    'FSx': ('FileSystemId', 'AWS/FSx'),
    'Macie': ('MemberAccountId', 'AWS/Macie'),
    'Neptune': ('DBInstanceIdentifier', 'AWS/Neptune'),
    'Opensearch': ('DomainName', 'AWS/ES'),  # AWS ES Namespace (Elasticsearch)
    'Outposts': ('OutpostId', 'AWS/Outposts'),
    'Aurora': ('DBClusterIdentifier', 'AWS/RDS'),  # Aurora uses RDS namespace
    'Backup': ('ResourceArn', 'AWS/Backup'),
}

# Function to get all DynamoDB entries with proper error handling
def get_all_dynamodb_entries():
    try:
        response = dynamodb.scan(TableName='ResourceMetrics')
        entries = response['Items']
        logger.info(f"Fetched {len(entries)} entries from DynamoDB.")
        return entries
    except Exception as e:
        logger.error(f"Error fetching entries from DynamoDB: {e}")
        return []

# Function to dynamically create metric widgets based on DynamoDB data
def create_metric_widgets(resource_data):
    widgets = []
    x, y = 0, 0

    # Dictionary to store metrics by resource type and metric
    metrics_by_type = {}

    for resource in resource_data:
        try:
            # Dynamically fetch required fields from DynamoDB entry
            resource_type = resource['ResourceType']['S']
            resource_id = resource['ResourceID']['S']
            metric_name = resource['MetricName']['S']

            # Get the correct dimension name and namespace based on resource type
            dimension_name, namespace = dimension_name_map.get(resource_type, ('ResourceID', 'AWS/Unknown'))

            # Dynamically fetch period and stat
            period = int(resource.get('Period', {}).get('N', 300))  # Default to 300 seconds if not provided
            stat = resource.get('Statistic', {}).get('S', 'Average')  # Default to 'Average' if not provided

            # Key to group metrics by resource type and metric
            key = f"{resource_type}-{metric_name}"

            # Add the metric for the resource under the correct group (key)
            if key not in metrics_by_type:
                metrics_by_type[key] = {
                    'namespace': namespace,
                    'dimension_name': dimension_name,
                    'metrics': [],
                    'period': period,
                    'stat': stat,
                    'title': f"{resource_type} - {metric_name}"
                }
            
            # Append this resource's metric to the group
            metrics_by_type[key]['metrics'].append([namespace, metric_name, dimension_name, resource_id])

        except KeyError as e:
            logger.error(f"KeyError: Missing field {e} for resource {resource}")
        except Exception as e:
            logger.error(f"Error processing resource {resource}: {e}")

    # Now create widgets for each grouped resource type and metric
    for key, data in metrics_by_type.items():
        widget = {
            "type": "metric",
            "x": x,
            "y": y,
            "width": 24,
            "height": 6,
            "properties": {
                "metrics": data['metrics'],  # All metrics for this resource type and metric
                "view": "timeSeries",
                "region": "us-east-1",
                "stat": data['stat'],  # Aggregation method dynamically fetched from DynamoDB
                "period": data['period'],  # Period dynamically fetched from DynamoDB
                "title": data['title']
            }
        }
        logger.info(f"Created widget for {key}: {json.dumps(widget, indent=2)}")
        widgets.append(widget)
        y += 6  # Adjust the y position for the next widget

    return widgets

# Function to create a resource summary widget (Pie chart)
def create_resource_summary_widget(resource_data):
    resource_counts = {}
    for resource in resource_data:
        resource_type = resource['ResourceType']['S']
        resource_counts[resource_type] = resource_counts.get(resource_type, 0) + 1

    # Log resource counts for debugging
    logger.info(f"Resource counts: {json.dumps(resource_counts, indent=2)}")

    # Dynamically create a pie chart based on the resource counts
    metrics = []
    for resource_type, count in resource_counts.items():
        metrics.append(["AWS/Service", "ResourceCount", "Service", resource_type])

    widget = {
        "type": "metric",
        "x": 0,
        "y": 0,
        "width": 24,
        "height": 6,
        "properties": {
            "metrics": metrics,
            "view": "pie",  # Use pie chart view for resource summary
            "region": "us-east-1",
            "title": "Resource Summary by Type",
            "stat": "Sum"
        }
    }
    logger.info(f"Created resource summary widget: {json.dumps(widget, indent=2)}")
    return widget

# Main Lambda handler function
def lambda_handler(event, context):
    try:
        # Fetch all existing entries in DynamoDB
        dynamodb_entries = get_all_dynamodb_entries()

        # Initialize data structures
        widgets = []

        # Create metric widgets based on DynamoDB data
        metric_widgets = create_metric_widgets(dynamodb_entries)
        widgets.extend(metric_widgets)

        # Create resource summary widget (Pie chart)
        resource_summary_widget = create_resource_summary_widget(dynamodb_entries)
        widgets.append(resource_summary_widget)

        # Create the dashboard body with all widgets
        dashboard_body = {"widgets": widgets}

        # Log the final dashboard body for debugging
        logger.info(f"Final dashboard body: {json.dumps(dashboard_body, indent=2)}")

        # Create or update the CloudWatch dashboard
        response = cloudwatch.put_dashboard(
            DashboardName="DynamicResourceDashboard",
            DashboardBody=json.dumps(dashboard_body)
        )

        # Log the CloudWatch response to capture any errors
        logger.info(f"CloudWatch response: {json.dumps(response, indent=2)}")
        logger.info("Successfully created/updated CloudWatch dashboard with dynamic widgets.")

    except Exception as e:
        logger.error(f"Lambda execution failed: {e}")

    return {
        'statusCode': 200,
        'body': json.dumps('CloudWatch Dashboard creation and update completed successfully.')
    }
