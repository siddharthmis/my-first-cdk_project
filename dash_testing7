import json

def y_axis_percent():
    return {"left": {"min": 0, "max": 100}, "right": {"showUnits": False}}

def y_axis_count():
    return {"left": {"min": 0, "max": 1000}, "right": {"showUnits": False}}

def build_patch_dashboard(data):
    widgets = []
    x, y = 0, 0

    if data:
        data.sort(key=lambda d: (d['AccountName'], d['Region']))
        avg_percent = round(sum(d['Percent'] for d in data) / len(data), 2)
        widgets.append({
            "type": "text",
            "x": 0,
            "y": y,
            "width": 24,
            "height": 3,
            "properties": {
                "markdown": f"## üõ°Ô∏è PATCH COMPLIANCE SUMMARY\n**{avg_percent}%** compliant across {len(data)} account-region pairs"
            }
        })
        y += 3

    for entry in data:
        widgets.extend([
            {
                "type": "metric",
                "x": 0, "y": y, "width": 8, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "PatchCompliance", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Average", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Patch %",
                    "yAxis": y_axis_percent()
                }
            },
            {
                "type": "metric",
                "x": 8, "y": y, "width": 8, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "SSMManagedPercent", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Average", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] SSM %",
                    "yAxis": y_axis_percent()
                }
            },
            {
                "type": "metric",
                "x": 16, "y": y, "width": 8, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "NonCompliantEC2Count", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "singleValue", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Noncompliant EC2s",
                    "yAxis": y_axis_count()
                }
            }
        ])
        y += 6

    return json.dumps({"widgets": widgets})


def build_backup_dashboard(data):
    widgets = []
    x, y = 0, 0

    if data:
        data.sort(key=lambda d: (d['AccountName'], d['Region']))
        total_resources = sum(d['ProtectedCount'] for d in data)
        widgets.append({
            "type": "text",
            "x": 0,
            "y": y,
            "width": 24,
            "height": 3,
            "properties": {
                "markdown": f"## üì¶ BACKUP SUMMARY\n**{total_resources}** protected resources across {len(data)} accounts"
            }
        })
        y += 3

    for entry in data:
        widgets.extend([
            {
                "type": "metric",
                "x": 0, "y": y, "width": 8, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "ProtectedResourceCount", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "gauge", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Protected",
                    "yAxis": y_axis_count()
                }
            },
            {
                "type": "metric",
                "x": 8, "y": y, "width": 8, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "JobStatus", "AccountId", entry["AccountId"], "Region", entry["Region"], "Status", "FAILED"],
                                ["...", "Status", "COMPLETED"]],
                    "view": "pie", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Backup Job Statuses",
                    "yAxis": y_axis_count()
                }
            },
            {
                "type": "metric",
                "x": 16, "y": y, "width": 8, "height": 6,
                "properties": {
                    "metrics": [["CentralDashboards", "ExpiringBackupsIn3Days", "AccountId", entry["AccountId"], "Region", entry["Region"]]],
                    "view": "singleValue", "stat": "Sum", "region": "us-east-1",
                    "title": f"{entry['AccountName']} [{entry['Region']}] Expiring in 3 Days",
                    "yAxis": y_axis_count()
                }
            }
        ])
        y += 6

        # Add failure reasons and problematic resources below
        reasons = entry.get("Reasons", {})
        if reasons:
            top = sorted(reasons.items(), key=lambda x: x[1], reverse=True)[:5]
            lines = [f"- `{reason}`: {count}" for reason, count in top]
            widgets.append({
                "type": "text",
                "x": 0, "y": y, "width": 12, "height": 6,
                "properties": {
                    "markdown": f"### {entry['AccountName']} [{entry['Region']}] Failure Reasons\n" + "\n".join(lines)
                }
            })

        resources = entry.get("ResourceFailures", {})
        if resources:
            top = sorted(resources.items(), key=lambda x: x[1], reverse=True)[:5]
            lines = [f"- `{res}`: {cnt}" for res, cnt in top]
            widgets.append({
                "type": "text",
                "x": 12, "y": y, "width": 12, "height": 6,
                "properties": {
                    "markdown": f"### {entry['AccountName']} [{entry['Region']}] Problematic Resources\n" + "\n".join(lines)
                }
            })

        y += 6

    return json.dumps({"widgets": widgets})
