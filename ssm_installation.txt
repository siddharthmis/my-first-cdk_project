import boto3
import logging
import time
from botocore.exceptions import ClientError

# Setup logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

ec2_client = boto3.client('ec2')
ssm_client = boto3.client('ssm')

# Define the SSM Agent installation scripts
LINUX_SSM_AGENT_SCRIPT = """#!/bin/bash
sudo yum install -y amazon-ssm-agent
sudo systemctl enable amazon-ssm-agent
sudo systemctl start amazon-ssm-agent
"""

WINDOWS_SSM_AGENT_SCRIPT = """<powershell>
$ErrorActionPreference = 'Stop'
Install-Module -Name AWS.Tools.Installer -Force -Scope CurrentUser
Install-SSMAgent
Start-Service AmazonSSMAgent
</powershell>
"""

MAX_RETRIES = 3
RETRY_DELAY = 10  # seconds

def lambda_handler(event, context):
    instances = get_all_instances()
    for instance_id, instance_os in instances:
        if not is_ssm_agent_installed(instance_id):
            try:
                logger.info(f"Processing instance {instance_id} ({instance_os})")
                
                # Backup the existing user data script
                original_user_data = retry(lambda: backup_user_data(instance_id))
                
                # Replace the existing user data script with SSM Agent installation script
                if instance_os == 'windows':
                    ssm_agent_script = WINDOWS_SSM_AGENT_SCRIPT
                else:
                    ssm_agent_script = LINUX_SSM_AGENT_SCRIPT
                
                retry(lambda: update_user_data(instance_id, ssm_agent_script))
                
                # Restart the instance to install SSM Agent
                restart_instance(instance_id)
                
                # Wait for the instance to stop
                wait_for_instance_state(instance_id, 'stopped')
                
                # Restore the original user data script
                retry(lambda: update_user_data(instance_id, original_user_data))
                
                # Restart the instance with the original script
                restart_instance(instance_id)
                
                logger.info(f"Successfully processed instance {instance_id}")
            except Exception as e:
                logger.error(f"Failed to process instance {instance_id}: {e}")

def get_all_instances():
    instances = []
    try:
        response = ec2_client.describe_instances()
        for reservation in response['Reservations']:
            for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                instance_os = 'windows' if 'platform' in instance and instance['platform'] == 'windows' else 'linux'
                instances.append((instance_id, instance_os))
    except ClientError as e:
        logger.error(f"Error retrieving instances: {e}")
    return instances

def is_ssm_agent_installed(instance_id):
    try:
        response = ssm_client.describe_instance_information(
            Filters=[
                {
                    'Key': 'InstanceIds',
                    'Values': [instance_id]
                }
            ]
        )
        return len(response['InstanceInformationList']) > 0
    except ClientError as e:
        logger.error(f"Error checking SSM Agent installation on {instance_id}: {e}")
        return False

def backup_user_data(instance_id):
    try:
        response = ec2_client.describe_instance_attribute(
            InstanceId=instance_id,
            Attribute='userData'
        )
        return response['UserData']['Value'] if 'UserData' in response else ''
    except ClientError as e:
        logger.error(f"Error backing up user data for {instance_id}: {e}")
        raise

def update_user_data(instance_id, user_data):
    try:
        ec2_client.modify_instance_attribute(
            InstanceId=instance_id,
            UserData={'Value': user_data}
        )
    except ClientError as e:
        logger.error(f"Error updating user data for {instance_id}: {e}")
        raise

def restart_instance(instance_id):
    try:
        ec2_client.stop_instances(InstanceIds=[instance_id])
        wait_for_instance_state(instance_id, 'stopped')
        ec2_client.start_instances(InstanceIds=[instance_id])
        wait_for_instance_state(instance_id, 'running')
    except ClientError as e:
        logger.error(f"Error restarting instance {instance_id}: {e}")
        raise

def wait_for_instance_state(instance_id, state):
    try:
        waiter = ec2_client.get_waiter(f'instance_{state}')
        waiter.wait(InstanceIds=[instance_id])
    except ClientError as e:
        logger.error(f"Error waiting for instance {instance_id} to reach state {state}: {e}")
        raise

def retry(func, retries=MAX_RETRIES, delay=RETRY_DELAY):
    for attempt in range(retries):
        try:
            return func()
        except Exception as e:
            if attempt < retries - 1:
                logger.warning(f"Retrying due to error: {e}")
                time.sleep(delay)
            else:
                logger.error(f"Max retries reached. Error: {e}")
                raise
