import os
import urllib3
import logging
import subprocess

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger()

# Environment variables
site = os.environ["CF_SITENAME"]
username = os.environ["CF_EMAIL"]
token = os.environ["CF_TOKEN"]

DFS_SERVER = os.environ["DFS_SERVER"]
DFS_SHARE = os.environ["DFS_SHARE"]
DFS_USERNAME = os.environ["DFS_USERNAME"]
DFS_PASSWORD = os.environ["DFS_PASSWORD"]
DFS_PATH = os.environ["DFS_PATH"]  # e.g., "/backups"

http = urllib3.PoolManager()
url = f'https://{site}.atlassian.net'

# Build headers
auth_header = urllib3.util.make_headers(basic_auth=f"{username}:{token}")
headers = {
    "Accept": "application/json",
    "Content-Type": "application/json",
}
headers.update(auth_header)


def download_to_dfs_directly(confluence_backup_path, filename):
    """
    Stream the Confluence backup directly to the DFS share.
    """
    dfs_path = f"//{DFS_SERVER}/{DFS_SHARE}/{DFS_PATH}/{filename}"
    logger.info(f"Starting direct download to DFS: {dfs_path}")
    
    smb_command = [
        "smbclient", f"//{DFS_SERVER}/{DFS_SHARE}",
        "-U", f"{DFS_USERNAME}%{DFS_PASSWORD}",
        "-c", f"prompt OFF; put - {DFS_PATH}/{filename}"
    ]
    
    try:
        # Start the subprocess to write to the DFS share
        with subprocess.Popen(smb_command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) as smb_proc:
            with http.request('GET', url + '/wiki/download/' + confluence_backup_path, headers=headers, preload_content=False) as response:
                if response.status != 200:
                    logger.error(f"Failed to download backup: {response.status} - {response.data.decode('utf-8')}")
                    raise RuntimeError(f"Failed to download backup: HTTP {response.status}")

                # Stream chunks directly to the smbclient process
                for chunk in response.stream(4096):
                    smb_proc.stdin.write(chunk)
                    smb_proc.stdin.flush()

                smb_proc.stdin.close()
            
            smb_stdout, smb_stderr = smb_proc.communicate()
            if smb_proc.returncode != 0:
                logger.error(f"smbclient failed: {smb_stderr}")
                raise RuntimeError(f"Error uploading directly to DFS: {smb_stderr}")
            logger.info(f"Direct download to DFS completed successfully: {dfs_path}")
            logger.debug(f"smbclient output: {smb_stdout}")
    except Exception as e:
        logger.error(f"Error during direct download to DFS: {e}")
        raise


def _get_backup_location():
    """
    Fetch the backup file location from Confluence.
    """
    logger.info("Fetching backup file location from Confluence...")
    response = http.request('GET', url + '/wiki/rest/obm/1.0/getprogress', headers=headers)
    if response.status != 200:
        logger.error(f"Failed to get backup progress: {response.status} - {response.data.decode('utf-8')}")
        raise RuntimeError(f"Failed to fetch backup location: HTTP {response.status}")

    progress_req = _http_response_to_json(response.data)
    logger.debug(f"Backup progress response: {progress_req}")

    try:
        backup_location = progress_req['fileName']
        logger.info(f"Backup file location obtained: {backup_location}")
    except KeyError:
        logger.error(f"Backup location not found in response: {progress_req}")
        raise KeyError("Backup location not available in response")

    return backup_location


def _http_response_to_json(http_response):
    """
    Convert HTTP response data to JSON.
    """
    response_string = http_response.decode('utf-8')
    try:
        return json.loads(response_string)
    except json.JSONDecodeError as e:
        logger.error(f"Failed to parse JSON from response: {response_string}")
        raise


def lambda_handler(event, context):
    """
    Main Lambda function handler.
    """
    logger.info("Starting Lambda function...")
    try:
        confluence_backup_path = _get_backup_location()
        filename = f"{site}_conf_backup.zip"
        download_to_dfs_directly(confluence_backup_path, filename)
    except Exception as e:
        logger.error(f"An error occurred: {str(e)}")
        raise
    logger.info("Lambda function completed successfully.")
