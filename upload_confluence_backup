import urllib3
import json
import os
import smbclient

# Confluence configuration
site = os.environ["CF_SITENAME"]
username = os.environ["CF_EMAIL"]
token = os.environ["CF_TOKEN"]
attachments = "y"
http = urllib3.PoolManager()
url = 'https://' + site + '.atlassian.net'

# SMB configuration
smb_server = os.environ["SMB_SERVER"]  # e.g., "\\fsx-server-address"
smb_share = os.environ["SMB_SHARE"]    # e.g., "shared-folder"
smb_username = os.environ["SMB_USERNAME"]
smb_password = os.environ["SMB_PASSWORD"]
fsx_path = os.path.join(smb_server, smb_share)

# Build headers
auth_header = urllib3.util.make_headers(basic_auth=f"{username}:{token}")
headers = {
    "Accept": "application/json",
    "Content-Type": "application/json",
}
headers.update(auth_header)

def download_backup():
    try:
        confluence_backup_path = _get_backup_location()
        backup_filename = f"{site}_conf_backup.zip"
        smb_file_path = os.path.join(fsx_path, backup_filename)

        # Configure SMB client credentials
        smbclient.ClientConfig(username=smb_username, password=smb_password)

        # Start download and write directly to SMB share
        print(f"Downloading backup from Confluence to {smb_file_path}...")
        with http.request('GET', url + '/wiki/download/' + confluence_backup_path, headers=headers, preload_content=False) as response:
            total_size = int(response.headers.get('Content-Length', 0))
            print(f"Total file size: {total_size} bytes")
            block_size = 4096
            bytes_written = 0

            with smbclient.open_file(smb_file_path, mode="wb") as smb_file:
                while True:
                    data = response.read(block_size)
                    if not data:
                        break
                    smb_file.write(data)
                    bytes_written += len(data)
                    progress = bytes_written / total_size * 100
                    print(f"Progress: {progress:.2f}%")

        print(f"Backup successfully saved to {smb_file_path}")
        return smb_file_path

    except Exception as e:
        print(f"Error during backup download or SMB upload: {str(e)}")
        raise

def _get_backup_location():
    try:
        response = http.request("GET", url + '/wiki/rest/obm/1.0/getprogress', headers=headers)
        progress_req = _http_response_to_json(response.data)

        backup_location = progress_req.get("fileName")
        if not backup_location:
            raise KeyError("Backup location not found in response.")
        
        print(f"Backup location: {backup_location}")
        return backup_location

    except Exception as e:
        print(f"Error fetching backup location: {str(e)}")
        raise

def _http_response_to_json(http_response):
    response_string = http_response.decode("utf-8")
    return json.loads(response_string)

# Trigger the download
download_backup()
